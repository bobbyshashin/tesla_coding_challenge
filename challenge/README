Author: Changsheng (Bobby) Shen
Email: changshs@andrew.cmu.edu
Date: Feb 29, 2020

How to compile:
	g++ main.cpp network.cpp supercharger_graph.cpp -std=c++11 -O1 -o candidate_solution

How to run:
	./candidate_solution SUPERCHARGER_A SUPERCHARGER_B

For example:
	./candidate_solution Palo_Alto_CA Orlando_FL


It will print an delta-optimal (in terms of total charging + travelling time) path from supercharger A to supercharger B. For example, the above command will output:
	Palo_Alto_CA, Coalinga_CA, 0.779874, Inyokern_CA, 1.79775, Needles_CA, 0.313725, Yucca_AZ, 1.74046, Flagstaff_AZ, 1.80556, Gallup_NM, 1.29193, Albuquerque_NM, 1.82857, Santa_Rosa_NM, 1.09756, Tucumcari_NM, 0.571429, Shamrock_TX, 1.84971, Ardmore_OK, 1.23077, Sulphur_Springs_TX, 2.11921, Shreveport_LA, 0.505263, Alexandria_LA, 1, Baton_Rouge_LA, 1.84971, Slidell_LA, 1.09677, Mobile_AL, 0.367347, DeFuniak_Springs_FL, 1.46341, Tallahassee_FL, 1.75824, Ocala_FL, 0.251969, Orlando_FL

By running checker_linux:
	Reference result: Success, cost was 64.2411
	Candidate result: Success, cost was 63.652



Design and Implmentation:
I converted this problem into a heuristics guided, shortest path graph search problem (e.g. A* searching).

Every state (vertex) in the graph is defined as: (located at supercharger x, with range y remaining), where 0 <= y <= 320km
To represent the intermediate charging steps as vertices in the graph, we discretize the range based on a discretization factor.

Then we have the unit_range = (max_range) / (discretization_factor - 1)

For example, in this problem:
	max_range = 320km, discretization_factor = 81
	the discretized unit range for charging is 320 / (81-1) = 4km
	(0, 4, 8, ..., 316, 320)

Because of the discretization here, we can only gurantee delta-optimality based on the discretization factor.
There exists a trade-off between computational cost and optimality:
	The higher the discretization_factor is, the more optimal the time cost will be, but this also increases computational cost,
	and vice versa.

However, in practical the time cost does not differ much once we have a relatively fine resolution (e.g. 4km, where discretization_factor=81)
With this setting, it takes less than 3 seconds to find the optimal path from Palo Alto to Orlando.
If we increases discretization_factor to 321 (1km resolution), it takes a lot longer to search, but only saves us less than 30 minutes (out of 66+ hours!) in terms of total time cost.

Also, the very optimal solution is also pretty tight-bounded, which might not be a good thing in practical, 
since you probably don't want to reach every next supercharger with exactly 0 battery remaining on a road trip ;)


While generating the graph, we add an edge between:
	1. Adjacent states that correspond to the same supercharger:
		i.e. charge from 100km to 104km
				cost = 4km / charging_rate hours.

	2. Between different superchargers when the vehicle has enough range to travel to the next supercharger
		i.e. travel from charger A with 100km range remaining, to charger B with 50km range remaining
				cost = distance(A, B) / vehicle_speed

Then we simply perform an A* search (or Dijkstra if we ignore the heuristics) to find the optimal path.

Feel free to play around with the parameters in main.cpp (i.e. decrease discretization_factor to achieve a faster search speed, or increases it to get better path).

Finally, this is the most interesting coding challenge I've ever done, enjoying. Thank you!